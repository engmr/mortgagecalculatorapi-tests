// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MAR.API.MortgageCalculator.QA.Tests.Features.CalculateController.Free
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class FreeFeature : object, Xunit.IClassFixture<FreeFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Free.feature"
#line hidden
        
        public FreeFeature(FreeFeature.FixtureData fixtureData, MAR_API_MortgageCalculator_QA_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/CalculateController/Free", "Free", "\t/calculate/free", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Calculate (free) endpoint returns successful response for request with HOA")]
        [Xunit.TraitAttribute("FeatureTitle", "Free")]
        [Xunit.TraitAttribute("Description", "Calculate (free) endpoint returns successful response for request with HOA")]
        [Xunit.TraitAttribute("Category", "CalculateControllerTests")]
        [Xunit.TraitAttribute("Category", "DeploymentSmokeTests")]
        public virtual void CalculateFreeEndpointReturnsSuccessfulResponseForRequestWithHOA()
        {
            string[] tagsOfScenario = new string[] {
                    "CalculateControllerTests",
                    "DeploymentSmokeTests"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate (free) endpoint returns successful response for request with HOA", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("I want to call the API CalculateController \'free\' resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1.AddRow(new string[] {
                            "PurchasePrice",
                            "100000.00"});
                table1.AddRow(new string[] {
                            "APR",
                            "2.75"});
                table1.AddRow(new string[] {
                            "LoanTermYears",
                            "30"});
                table1.AddRow(new string[] {
                            "DownPaymentPercent",
                            "20"});
                table1.AddRow(new string[] {
                            "PropertyTaxRate",
                            "1.15"});
                table1.AddRow(new string[] {
                            "HomeownerInsuranceRate",
                            "0.22"});
                table1.AddRow(new string[] {
                            "HOAMonthly",
                            "10"});
#line 7
 testRunner.And("with this API MortgageCalculationRequest", ((string)(null)), table1, "And ");
#line hidden
#line 16
 testRunner.When("I call the API using POST, the url and the request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 17
 testRunner.Then("the API HTTP response is successful", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 18
 testRunner.And("the API HTTP domain response data is correct", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table2.AddRow(new string[] {
                            "MortgagePaymentyMonthly",
                            "326.59"});
                table2.AddRow(new string[] {
                            "PropertyTaxPaymentMonthly",
                            "95.83"});
                table2.AddRow(new string[] {
                            "HomeownersInsurancePaymentMonthly",
                            "18.33"});
                table2.AddRow(new string[] {
                            "DownPayment",
                            "20000"});
                table2.AddRow(new string[] {
                            "TermInterestPaid",
                            "37573.46"});
#line 19
 testRunner.And("the API HTTP response Data matches this successful MortgageCalculationResult", ((string)(null)), table2, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Calculate (free) endpoint returns successful response for request without HOA")]
        [Xunit.TraitAttribute("FeatureTitle", "Free")]
        [Xunit.TraitAttribute("Description", "Calculate (free) endpoint returns successful response for request without HOA")]
        [Xunit.TraitAttribute("Category", "CalculateControllerTests")]
        public virtual void CalculateFreeEndpointReturnsSuccessfulResponseForRequestWithoutHOA()
        {
            string[] tagsOfScenario = new string[] {
                    "CalculateControllerTests"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate (free) endpoint returns successful response for request without HOA", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 29
 testRunner.Given("I want to call the API CalculateController \'free\' resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table3.AddRow(new string[] {
                            "PurchasePrice",
                            "100000.00"});
                table3.AddRow(new string[] {
                            "APR",
                            "2.75"});
                table3.AddRow(new string[] {
                            "LoanTermYears",
                            "30"});
                table3.AddRow(new string[] {
                            "DownPaymentPercent",
                            "20"});
                table3.AddRow(new string[] {
                            "PropertyTaxRate",
                            "1.15"});
                table3.AddRow(new string[] {
                            "HomeownerInsuranceRate",
                            "0.22"});
                table3.AddRow(new string[] {
                            "HOAMonthly",
                            "0"});
#line 30
 testRunner.And("with this API MortgageCalculationRequest", ((string)(null)), table3, "And ");
#line hidden
#line 39
 testRunner.When("I call the API using POST, the url and the request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 40
 testRunner.Then("the API HTTP response is successful", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 41
 testRunner.And("the API HTTP domain response data is correct", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table4.AddRow(new string[] {
                            "MortgagePaymentyMonthly",
                            "326.59"});
                table4.AddRow(new string[] {
                            "PropertyTaxPaymentMonthly",
                            "95.83"});
                table4.AddRow(new string[] {
                            "HomeownersInsurancePaymentMonthly",
                            "18.33"});
                table4.AddRow(new string[] {
                            "DownPayment",
                            "20000"});
                table4.AddRow(new string[] {
                            "TermInterestPaid",
                            "37573.46"});
#line 42
 testRunner.And("the API HTTP response Data matches this successful MortgageCalculationResult", ((string)(null)), table4, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Calculate (free) endpoint returns too many requests")]
        [Xunit.TraitAttribute("FeatureTitle", "Free")]
        [Xunit.TraitAttribute("Description", "Calculate (free) endpoint returns too many requests")]
        [Xunit.TraitAttribute("Category", "CalculateControllerTests")]
        [Xunit.TraitAttribute("Category", "RateLimitingTests")]
        public virtual void CalculateFreeEndpointReturnsTooManyRequests()
        {
            string[] tagsOfScenario = new string[] {
                    "CalculateControllerTests",
                    "RateLimitingTests"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate (free) endpoint returns too many requests", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 52
 testRunner.Given("I want to call the API CalculateController \'free\' resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 53
 testRunner.And("I am API rate limited to \'2 per 10 s\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table5.AddRow(new string[] {
                            "PurchasePrice",
                            "100000.00"});
                table5.AddRow(new string[] {
                            "APR",
                            "2.75"});
                table5.AddRow(new string[] {
                            "LoanTermYears",
                            "30"});
                table5.AddRow(new string[] {
                            "DownPaymentPercent",
                            "20"});
                table5.AddRow(new string[] {
                            "PropertyTaxRate",
                            "1.15"});
                table5.AddRow(new string[] {
                            "HomeownerInsuranceRate",
                            "0.22"});
                table5.AddRow(new string[] {
                            "HOAMonthly",
                            "0"});
#line 54
 testRunner.And("with this API MortgageCalculationRequest", ((string)(null)), table5, "And ");
#line hidden
#line 63
 testRunner.When("I call the API using POST, the url and the request to trigger API rate limiting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 64
 testRunner.Then("the API HTTP response is too many requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 65
 testRunner.And("the API HTTP response Content is the API rate limited message from ScenarioContex" +
                        "t", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                FreeFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                FreeFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
